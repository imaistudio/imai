# Kling API Route Testing Instructions - Postman

## Prerequisites
1. Ensure your Next.js application is running (usually on http://localhost:3000)
2. Make sure you have KLING_ACCESS_KEY and KLING_SECRET_KEY set in your .env.local file
3. Have Postman installed

## Environment Variables Setup
Add these to your .env.local file:
```
KLING_ACCESS_KEY=
KLING_SECRET_KEY=
```

## Test Setup

### 1. Create New Request
- Open Postman
- Click "New" â†’ "Request"
- Name it "Kling Image to Video"
- Save to a collection

### 2. Configure Request Method & URL
- Set method to: **POST**
- Set URL to: `http://localhost:3000/api/kling`
- (Replace localhost:3000 with your actual domain if deployed)

### 3. Set Headers
- Click on "Headers" tab
- Add header:
  - Key: `Content-Type`
  - Value: `application/json`

### 4. Configure Request Body
- Click on "Body" tab
- Select "raw" option
- Choose "JSON" from dropdown
- Add the following JSON:

```json
{
  "image": "https://example.com/your-image-url.jpg"
}
```

## Test Cases

### Test Case 1: Valid Image URL
```json
{
  "image": "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800"
}
```

**Expected Response:**
- Status: 200 OK
- Body: JSON response from Kling API with video generation details

### Test Case 2: Missing Image URL
```json
{}
```

**Expected Response:**
- Status: 400 Bad Request
- Body: 
```json
{
  "error": "Image URL is required"
}
```

### Test Case 3: Invalid Image URL
```json
{
  "image": "not-a-valid-url"
}
```

**Expected Response:**
- Status: May vary (400-500) depending on Kling API response
- Body: Error message from Kling API

### Test Case 4: Empty Image URL
```json
{
  "image": ""
}
```

**Expected Response:**
- Status: 400 Bad Request
- Body: 
```json
{
  "error": "Image URL is required"
}
```

## Testing Different HTTP Methods

### Test GET Request (Should Fail)
- Change method to **GET**
- Keep same URL: `http://localhost:3000/api/kling`
- Remove body content

**Expected Response:**
- Status: 405 Method Not Allowed
- Body:
```json
{
  "error": "Method not allowed"
}
```

## Response Analysis

### Successful Response Structure
When successful, you should receive a response similar to:
```json
{
  "id": "task-id-from-kling",
  "status": "processing",
  "message": "Video generation started",
  // ... other fields from Kling API
}
```

### Error Response Structure
```json
{
  "error": "Error description",
  "details": "Additional error details (if available)",
  "status": "HTTP status code (if from external API)"
}
```

## Troubleshooting

### Common Issues:

1. **500 Internal Server Error - "Kling API credentials not configured"**
   - Check if KLING_ACCESS_KEY and KLING_SECRET_KEY are set in .env.local
   - Restart your Next.js server after adding the credentials

2. **Connection Refused**
   - Ensure your Next.js app is running
   - Check if the port is correct (default: 3000)

3. **CORS Issues**
   - This shouldn't happen with API routes, but if it does, check your Next.js configuration

4. **Invalid API Credentials Response**
   - Verify your KLING_ACCESS_KEY and KLING_SECRET_KEY are correct and active
   - Check that both credentials are provided correctly
   - Ensure the JWT token generation is working properly

## Sample Working cURL Command
For reference, here's the equivalent cURL command:

```bash
curl --location --request POST 'http://localhost:3000/api/kling' \
--header 'Content-Type: application/json' \
--data-raw '{
    "image": "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800"
}'
```

## Hardcoded Parameters
Remember that these parameters are hardcoded in the API and cannot be changed via the request:
- model_name: "kling-v1"
- mode: "pro"
- duration: "5"
- prompt: "360 view of the image"
- cfg_scale: 0.5

## Authentication Details
The API uses JWT (JSON Web Token) authentication based on official Kling AI documentation:
1. Your Access Key and Secret Key are used to generate a JWT token
2. The JWT token is automatically generated server-side with a 30-minute expiry
3. The token includes: `iss` (Access Key), `exp` (expiration), `nbf` (not before) 
4. The token is signed using HS256 algorithm with secret key directly
5. The header explicitly sets `alg: HS256` and `typ: JWT`
6. The token is sent as a Bearer token in the Authorization header
7. No manual token generation is required on the client side

### JWT Structure (matches official Java implementation):
```json
{
  "iss": "your_access_key",     // Access Key as issuer
  "exp": 1234567890,            // Current time + 1800s (30 minutes)  
  "nbf": 1234567885             // Current time - 5s (not before)
}
```

## Debugging Authentication Issues
If you're still getting auth errors, check the server logs for:
1. JWT token generation details
2. The exact payload being sent to Kling API
3. The Authorization header format

You can also test your credentials directly with this cURL command:
```bash
# Replace with your actual credentials
ACCESS_KEY="AYMkTdtLNLgJHebMhbbkQDGNeLJGnHbQ"
SECRET_KEY="mGMdp9bA9PgYykTypNtErfDaKfCK99y4"

# Generate JWT manually (requires jwt command line tool)
# Or test through the API route
```

## Next Steps After Testing
1. If the API returns a task ID, you may need to poll another endpoint to check the status
2. The actual video URL will be provided once processing is complete
3. Implement proper error handling in your frontend application based on these test results
